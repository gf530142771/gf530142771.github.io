{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Solitaitr项目笔记 powered by Gitbook该文章修订时间： 2021-10-28 17:23:50 "},"Solitaire项目笔记/":{"url":"Solitaire项目笔记/","title":"Solitaire项目笔记","keywords":"","body":"Introduction Solitaitr项目概况 powered by Gitbook该文章修订时间： 2022-02-28 10:50:53 "},"Solitaire项目笔记/项目概况/1.项目初探/":{"url":"Solitaire项目笔记/项目概况/1.项目初探/","title":"1.项目初探","keywords":"","body":"Introduction Solitaitr项目笔记 powered by Gitbook该文章修订时间： 2021-10-28 17:34:08 "},"Solitaire项目笔记/项目概况/1.项目初探/1.项目初探.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/1.项目初探.html","title":"1.项目初探","keywords":"","body":"项目初探 入口 main.js游戏入口jsb_boot.js cc.initEngine方法进入PreloadScene 目录说明 activity 运营活动相关模块 advert 活动相关的广告逻辑处理 challenge home场景挑战相关的数据和界面等 club home场景工会相关的数据和各种界面等 cocosext 对cocos一些功能的二次封装 common 消息类的封装，不建议继续使用，用起来比较繁琐 component 一些通用节点和功能模块的封装 config 游戏里用的的全局配置 cryptor 加密相关模块，分为文件加密和内存加密，防止破解包的，具体用法可以参考以前的 editcomp 看着是想做输入框的封装 elite 大师联赛相关，具体和策划对着功能分析 friends 好友相关的数据和界面管理 msg 弹窗相关的大部分页面 network 网络相关模块，现在只用了http模块 node 封装的一些通用节点 pass pass活动相关功能和数据 promotions 所有的促销数据和界面 tutorial 引导相关模块 transition 场景切换相关模块 script cocos自带模块 powered by Gitbook该文章修订时间： 2021-10-28 17:13:39 "},"Solitaire项目笔记/项目概况/1.项目初探/2.preloadScene.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/2.preloadScene.html","title":"2.preloadScene","keywords":"","body":"preloadScene 预加载PreloadScene所需脚本 初始化基本数据 初始化语言 初始化ad 通过jsb 调用 安卓或者ios平台相关 jsb.MetaInfoMgr 检查热更新 ScriptDownloader 登录流程loadLayer负责显示。 其他preload目录中文件的作用 preload一般不再轻易改动 Downloader.js用来处理游戏内按模块下载的内容. 比如运营活动/促销等单独的模块. DownloaderManager.js用来和C++层同信，主要是管理下载状态的。 用于下载文件和下载状态的监听 JSObject.js 自己补的一些通用函数JS一些基础类(String Math Obejct)等的一些扩展。 ModuleDownloader.js管理模块下载的顺序等，具体使用看代码 目前是在HomeScene中使用 与Downloader搭配使用管理模块的下载队列 MsgCenterMgr.js自己写的js层面的通知类，比cocos提供的监听类使用简单，效率更快。 通过一个{}来管理 注册监听：key 和 handler 删除监听: key 通知: cmd 命令即函数名称 data 函数的参数 通过检查handler是否实现了该函数起到通知的作用。 MustDownloader.js暂时不需关注，没有使用 ParseManifest.js解析下载模块的manifest文件，用于增量更新，在Downloader.js中被使用。 ScriptDownloader.js脚本下载文件，用于脚本和必下资源下载 使用的是cocos2d-x的自带热更检查 UpdateFailLayer.js下载脚本和必下资源失败，点击按钮重新下载脚本和必下资源。 GlobalFlag.js一些全局配置文件 LanguageMgr.js多语言管理文件，用于显示界面上的不同语言，根据语言的切换，切换不同的配置文件。相关配置文件在must_download_res文件夹下 PluginLog.js打log到要求平台的封装文件，具体使用看代码打点功能也在此类里处理 PreloadResponse.js用于监听网络状态需要用到网络的地方使用此值g_isOnline获取网络状态。 ReloadModule用于加载需要更新脚本后加载的文件加载的是_init.js文件 详见模块管理 模块管理 每一个大目录下都要有一个_init.js脚本，用于加载目录下的所有脚本。ReloadModule.js脚本中的方法负责加载所有的_init.js文件。_init.js范例 require(\"play/ctrl/CardGenerator.js\") require(\"play/ctrl/CardManager.js\") require(\"play/ctrl/ChallengeSeqMgr.js\") require(\"play/ctrl/ChallengeStarMgr.js\"); require(\"play/ctrl/GameController.js\") require(\"play/ctrl/GameDataManager.js\") require(\"play/ctrl/HistoryRecorder.js\") require(\"play/ctrl/NPCDecision.js\") require(\"play/ctrl/SkillCardManager.js\") require(\"play/ctrl/SkillLevelManager.js\") require(\"play/ctrl/SupplyManager.js\") require(\"play/ctrl/UserActionLogger.js\") require(\"play/ctrl/ComboDataMgr.js\") require(\"play/ctrl/SkillOutCardsMgr.js\"); powered by Gitbook该文章修订时间： 2021-10-29 13:45:43 "},"Solitaire项目笔记/项目概况/1.项目初探/3.HomeScene.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/3.HomeScene.html","title":"3.HomeScene","keywords":"","body":"HomeScene 游戏的home界面，主要用于各个活动和系统的展示。 结构说明 HomeScene.js加载必要资源，播放音效，初始化play界面，添加点击监听，进行后台模块下载 DownLoadTestNode.js下载测试模块，用于查看后台下载进度，正式线上代码中无作用 FootNavigator.jshome场景底部切换icon管理，包括商店/好友/主场景/工会/挑战模块，用于管理各个界面间的切换 HomeChallengeLayer.js用于管理挑战界面，会创建场景，添加监听，去后端刷新挑战状态，该模块需要联网。根据后端传回的数据决定显示选择挑战类型界面还是显示具体的挑战。 HomeClubLayer.js工会主界面，该界面需要联网刷新工会信息等状态，通过添加监听刷新外面icon的状态 HomeFriendLayer.js好友主界面，需要联网刷新状态，主要处理逻辑和工会/挑战类似。 HomeLayer.js用于home场景页面控制，还有一些数据的处理（比如阶段奖励大师联赛等），还用于刷新好友和工会数据。 HomePlayDataMgr.js用于刷新从play返回的home游戏数据/活动数据/促销数据/商店数据/pass等， HomePlayLayer.jshome主页面,用于关卡选择，还有各种活动促销等入口的刷新 10 HomePlayUIMgr.js用于根据规则重新排列主界面上各种按钮的摆放 HomeScreenMap.js显示升级关卡后的各种缩略图，由homeLayer中的点击事件触发。 HomeTitle.js上方UI的显示，包括设置/金币/测试入口等 ModuleUnLockLayer.js用于下方icon的解锁动画 PopupOrderDataMgr.js用于记录游戏中某弹窗是否已经主动打开过，主要用作判断只需要主动打开一次的弹窗 ToolBoxLayer.js测试用的，方便测试调整关卡等操作 powered by Gitbook该文章修订时间： 2021-10-29 16:02:10 "},"Solitaire项目笔记/项目概况/1.项目初探/4.PlayScene.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/4.PlayScene.html","title":"4.PlayScene","keywords":"","body":"PlayScene 游戏场景严格遵循mvc框架。 目录说明 model CardData.js记录关卡生成器中生成的单张卡牌的各种数据，包括但不限于卡牌的位置旋转大小，卡牌在牌链中的深度信息，颜色，数值，上方和下方的牌链，卡牌上挂载的技能和技能的数据，卡牌类型，已经卡牌是否可见等等 CardTag.js卡牌tag的枚举，包括普通卡牌和道具卡牌，用于获取特定tag的卡牌 CardType.js卡牌类型的枚举，用于区分特定类型的卡牌。 ComboReward.jscombo奖励数据 HistoryRecord.js记录翻牌上一步的数据，是个数组，用于undo返回上一步操作，可以多次返回上一步，直到记录里面没数据 IPhoneXOffset.js用于滑动玩法的数据，用来处理不同屏幕的显示区域 LevelSkillType.js涉及到场景相关的技能，不是影响单一卡牌，比如滑动场景/加锁场景等 OutCardsSkillType.js蝴蝶等和卡牌场景都相关的技能 Path处理牌链相关逻辑 SkillType.js卡牌上的技能的枚举 TaskDataInPlay.js关卡中任务相关数据 ctrl CardGenerator根据特定的算法和关卡配置生成卡牌的颜色和数字 CardManager牌堆牌管理类，管理上方牌堆中牌的数据逻辑 ChallengeSeqMgr序列挑战关卡相关，按照给定算法生成牌堆中指定序列的牌 ChallengeStarMgr星星挑战关卡相关，根据关卡配置，生成星星挑战相关数据，以及计算星星挑战完成或者失败条件 ComboDataMgr根据combo奖励是否为红色或者黑色牌刷，保存被影响的牌堆牌 GameDataManager根据条件，记录一局游戏中各种操作数据，用于结算和打点 HistoryRecorder保存游戏过程中每一步操作后的数据，用于undo NPCDecision按照给定算法让npc自动玩游戏，mac端可以按～键调出来npc SkillCardManager用于管理卡牌上的技能，在每次操作卡牌或者undo前，会先检查卡牌上技能的影响 SkillLevelManager用于管理关卡技能，用于滑动或者锁等关卡技能的数据的管理 SkillOutCardsMgr用于蝴蝶牌等非卡牌技能的管理，类似关卡技能，当时不是同一人做的，被分开了 SupplyManager牌库牌的管理类，用于管理下面手动翻牌区的状态变化等 GameController游戏核心管理类，管理游戏中数据初始化和其他所有管理类的状态变化。 powered by Gitbook该文章修订时间： 2021-10-28 16:46:50 "},"Solitaire项目笔记/项目概况/1.项目初探/5.mgr目录.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/5.mgr目录.html","title":"5.mgr目录","keywords":"","body":"游戏管理者目录 目录文件说明 ArchiveDataMgr.js管理玩家游戏数据的本地存档用于记录玩家数据和与服务器同步存档具体key查看DatabaseKey的user属性 AudioMgr.js负责游戏的音乐和音效 ConfigMgr.js操作游戏中配置的管理类一些静态方法根据level等数据获取写固定配置，如使用的背景图，消耗的金币,关卡奖励，一些功能的开启等。 DatabaseKey.js记录玩家数据和一些公共数据的枚举 DatabaseMgr.js用于本地保存一些状态变量比如是不是第一次打开游戏等具体key查看DatabaseKey的global属性 UserDataMgr.js用户数据管理类。用于管理用户的各种数据。 DownloadResMgr.js资源下载管理 JumpLayerMgr.js管理界面跳转使用 cc.eventManager来派送消息。 LoggingLoaclDataMgr.js登录相关的本地数据管理 LoginMgr.js管理用户的整个登录系统 MessageLayerMgr.js消息界面的管理，用于弹出层界面的弹出规则的管理 PhaseRewardStateMgr.js阶段奖励的状态管理 PigAniMgr.jspig动画管理 RedShowMgr.js红点管理 UserNameMgr.js玩家名称管理 powered by Gitbook该文章修订时间： 2021-10-29 15:49:09 "},"Solitaire项目笔记/项目概况/1.项目初探/6.脚本的使用.html":{"url":"Solitaire项目笔记/项目概况/1.项目初探/6.脚本的使用.html","title":"6.脚本的使用","keywords":"","body":"项目脚本说明 项目脚本都保存在tools的文件夹下。下面只是目前我用到的脚本，后续补充。 sub-project/tools autopacker.sh图集打包脚本，将资源打包为图集。使用方法: ./autopacker.sh 资源目录路径 支持模糊查找 目录名称可以是目录的一部分 publish_js.py发布脚本，并且会拉取关卡资源。 powered by Gitbook该文章修订时间： 2021-11-10 13:58:42 "},"Solitaire项目笔记/项目概况/2.UI绘制/":{"url":"Solitaire项目笔记/项目概况/2.UI绘制/","title":"2.UI绘制","keywords":"","body":"Introduction Solitaitr项目笔记 powered by Gitbook该文章修订时间： 2021-10-28 17:32:49 "},"Solitaire项目笔记/项目概况/2.UI绘制/1.creator界面的使用.html":{"url":"Solitaire项目笔记/项目概况/2.UI绘制/1.creator界面的使用.html","title":"1.creator界面的使用","keywords":"","body":"creato界面的使用 git工程 项目名称：solitaire_ui项目分支：ui_work creator版本：2.3.2 UI界面 如何拼接面不在赘述。 build 项目->UIEditor->Build Now生成 .ccreator文件。 使用 cc.spriteFrameCache.addSpriteFrames(\"ui/ui_button.plist\"); cc.spriteFrameCache.addSpriteFrames(\"change_apk/change_apk.plist\"); // 使用前需要自己加载资源 creator.CreatorReader.createWithFilename(\"change_apk/message.ccreator\"); 注意使用前需要自己加载资源,使用完成后记得从内存中清除资源要使用pvr类型的资源，关于pvr资源的生成详见参考这个文档 powered by Gitbook该文章修订时间： 2021-11-10 13:53:56 "},"Solitaire项目笔记/项目概况/2.UI绘制/2.基本界面的创建.html":{"url":"Solitaire项目笔记/项目概况/2.UI绘制/2.基本界面的创建.html","title":"2.基本界面的创建","keywords":"","body":"基本的类型 Scene继承cc.Scene具体方法查看官方api Node继承cc.Node具体方法查看官方api Layer继承cc.Laye具体方法查看官方api 自己封装的UI类 MessageLayer 参考msg目录弹出层界面的基类，用于绘制弹出层 1.常用方法 setPriority设置显示优先级，优先级越低 ，越优先显示 setValidBgSize设置bg层的大小，点击到bg范围外时将自动关闭弹窗。 setValidBgX设置bg层x坐标 setValidBgY设置bg层的y坐标 showEnterAction弹出的动画 onPopActionEnd弹出动画完成后的回调 showDisappearEffect关闭界面 有动画 disact关闭界面 无动画 2.绘制调用 通过MessageLayerMgr的showMessage方法来显示 let layer = new MsgCoinRechargeLayer(); MessageLayerMgr.getInstance().showMessage(layer, true); TransitionNode Scene转场时的基类 在transition目录下 1.方法 ctor在子类的构造函数里初始化下个scene要用到的资源。 SpriteFrame this._frames 音效资源 this._music 图片资源 this._image 骨骼动画资源 this._spines this._super(parent)发在初始化资源之后。 replaceScene资源的加载会在基类中完成，具体实现看基类的具体方法，资源加载完成后，会调用此方法，在此方法里写转场代码。 replaceScene: function () { var scene = new HomeScene(); scene.setName(\"HomeScene\"); cc.director.replaceScene(scene); } 常用的屏幕数据 display.js 用于屏幕适配的计算 基本参数 display.sw屏幕的宽 display.sh屏幕的高 display.size屏幕安全区的大小 display.width屏幕安全区的宽 display.height屏幕安全区的高 display.cx屏幕宽的一半 display.cy屏幕高的一半 display.cl屏幕安全区宽的一半的负值 display.cr屏幕安全区宽的一半 display.ct 屏幕安全区高的一半的 display.cb屏幕安全区高的一半负值 display.left安全区域的x值 display.rightdisplay.left + display.width display.topdisplay.bottom + display.height display.bottom安全区域的y值 display.center中心 cc.p(display.cx ,display.cy) powered by Gitbook该文章修订时间： 2022-02-25 14:13:09 "},"Solitaire项目笔记/项目概况/3.热更新/":{"url":"Solitaire项目笔记/项目概况/3.热更新/","title":"3.热更新","keywords":"","body":"Introduction Solitaitr项目笔记 powered by Gitbook该文章修订时间： 2021-10-29 10:31:16 "},"Solitaire项目笔记/项目概况/3.热更新/常见问题.html":{"url":"Solitaire项目笔记/项目概况/3.热更新/常见问题.html","title":"常见问题","keywords":"","body":"常见问题 1.本地测试时，如何不拉取最新的代码。 删除sub-project/download/src文件夹下除project.manifest外的所有文件。 修改project.manifest中的version值，修改为一个很大值即可。 powered by Gitbook该文章修订时间： 2021-11-11 14:50:12 "},"Solitaire项目笔记/项目概况/4.骰子活动/":{"url":"Solitaire项目笔记/项目概况/4.骰子活动/","title":"4.骰子活动","keywords":"","body":"Introduction 骰子活动 powered by Gitbook该文章修订时间： 2021-11-03 19:52:12 "},"Solitaire项目笔记/项目概况/4.骰子活动/骰子活动说明.html":{"url":"Solitaire项目笔记/项目概况/4.骰子活动/骰子活动说明.html","title":"骰子活动说明","keywords":"","body":"骰子活动说明 策划文档 这里 所在目录 activity/diceShell 目录结构 关于类的具体功能看类的具体注释 diceShell ├── Dice3DPlay.js 3d骰子 ├── DiceEnum.js 枚举 ├── DiceExplainLayer.js 帮助界面 ├── DiceReceiveRewardLayer.js 奖励展示界面 ├── DiceShellActivityBtn.js 入口按钮绘制 ├── DiceShellBuyDiceLayer.js 骰子购买界面 ├── DiceShellDataMgr.js 骰子活动界面管理 ├── DiceShellEndLayer.js 骰子活动结束提示界面 ├── DiceShellMainLayer.js 骰子活动游戏界面 ├── DiceShellResultNode.js 骰子活动在结算界面的节点 ├── _init.js ├── animation │ ├── DiceRewardAni.js 道具奖励动作 │ ├── DiceShellAniMgr.js 动作管理 │ ├── DiceShellCheeseAni.js 棋盘动作 │ └── _init.js └── ui ├── DiceShellUIMgr.js UI界面管理类 ├── DiceShellUIUtil.js UI创建工具类 ├── _init.js ├── config │ ├── DiceShellBgConfig.js 背景界面配置 │ ├── DiceShellBtnConfig.js 骰子按钮配置 │ ├── DiceShellCardConfig.js 纸牌收集物显示配置 │ ├── DiceShellCheeseMapConfig.js 棋盘配置 │ ├── DiceShellPlayLayerConfig.js 扑克牌游戏界面配置 │ ├── DiceShellbarConfig.js 收集物进度条配置 │ └── _init.js └── skin_summer ├── DiceShellBgNode.js 背景UI ├── DiceShellCheeseMap.js 棋盘UI ├── DiceShellDiceBtn.js 骰子按钮UI ├── DiceShellProBarNode.js 收集物(贝壳)进度UI ├── DiceShellTitleNode.js titleUI └── _init.js 目前主要修改 animation 和 ui 文件夹中的文件是为了给DiceShellMainLayer.js瘦身，减少不必要代码的阅读量而创建的。是为了减少DiceShellMainLayer.js代码量，便于阅读和修改。 animation 中的文件目前与DiceShellMainLayer.js耦合度很高，修改时尽量注意。注意方法中this的指代，尽量使用apply或者call的形式调用。 powered by Gitbook该文章修订时间： 2021-11-10 13:58:50 "},"Solitaire项目笔记/项目概况/4.骰子活动/骰子活动扩展.html":{"url":"Solitaire项目笔记/项目概况/4.骰子活动/骰子活动扩展.html","title":"骰子活动扩展","keywords":"","body":"骰子活动扩展(换皮) 特别注意 因为是在老代码的上进行的修改，耦合较高，动作过分依赖某些节点。此活动扩展性不是很高扩展时，新增代码，不要动旧代码。防止原来的活动出现问题，通过skin值来决定使用旧代码还是新代码 注意事项： 资源名称尽量保持一致。包括图片，spine动画，音效等避免不必要修改。 某一个类修改过大时，不要在原来代码上修改，避免影以前代码，需要新建子类进行扩展。 所有节点的数量和名称尽量保持一致，尽量不要删除节点。 1.入口按钮 文件: HomePlayLayer.js 方法: initShellActivity 说明: 入口按钮的绘制 代码位置:DiceShellActivityBtn.js 修改方法:根据皮肤新增相关绘制方法即可，仿照createSummerBtn即可 2.游戏场景卡牌上的收集物 收集物数量的计算 文件: GameController.js 方法: initDiceShell 说明: 管理牌上是否出现活动道具 计算本关可以出现几个道具。 收集物的显示 文件: CardEntity.js 方法: initActiveSkillDiceShell 说明: 在牌上显示收集物 配置文件: DiceShellCardConfig.js 游戏界面收集图标显示 文件: HeadBar.js 方法: initDiceShell 配置文件: DiceShellPlayLayerConfig.js 3.结算界面 结算界面道具收集 文件: ResultNode.js 位置: if (this._gameData[\"shell_num\"] !== undefined && shell_node) { 配置文件: DiceShellResultNode.js 修改方法:根据皮肤新增相关绘制方法即可，仿照createSummerResultNode即可。 4.活动游戏界面。 弹窗界面 奖励展示界面 DiceReceiveRewardLayer.js 骰子购买界面 DiceShellBuyDiceLayer.js 活动结束界面 DiceShellEndLayer.js 引导界面 DiceExplainLayer.js 以上界面替换cocoscreator导出资源即可。 动作类 查看文件夹activity/diceShell/animation的类 UI类 查看文件夹activity/diceShell/ui的类 看代码，解决一切疑惑，不懂你找我 5.数据管理类 DiceShellDataMgr.js powered by Gitbook该文章修订时间： 2021-11-11 16:13:00 "},"Solitaire项目笔记/项目概况/5.版本更新/":{"url":"Solitaire项目笔记/项目概况/5.版本更新/","title":"5.版本更新","keywords":"","body":"Introduction powered by Gitbook该文章修订时间： 2022-02-28 10:49:31 "},"Solitaire项目笔记/项目概况/5.版本更新/1.版本更新注意事项.html":{"url":"Solitaire项目笔记/项目概况/5.版本更新/1.版本更新注意事项.html","title":"1.版本更新注意事项","keywords":"","body":"版本更新注意事项 打包版本更新 重要 和策划确认GM工具的上的配置。 确认solitaire-editor的配置。 脚本和资源版本号 注意脚本和资源版本号的一致。 脚本新功能一定要区分版本，防止脚本更新后老版本调用新的接口。 关卡总数更新 关卡总数更新后，需要关注一下以下功能的修改。 拼图功能 bgDownLoadAction: function (fileList){ let clientVer = CheckVersionHelper.getInstance().getLocalClientVersion(); if(clientVer>12000){ // 关注一下这里需要手动修改 for(let i=3;i 联赛功能已在登录是进行了修改 EliteDataMgr.getInstance().loginIn(response.elite_tour); powered by Gitbook该文章修订时间： 2022-02-28 10:48:38 "}}